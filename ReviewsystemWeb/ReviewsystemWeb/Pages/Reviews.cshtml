@page
@model ReviewsystemWeb.Pages.ReviewsModel
@{
    Layout = "_Layout";
}

<!-- Logout Button -->
<button type="button" class="btn btn-light btn-custom logout-btn" onclick="window.location='/LogoutPage';">
    Logout
</button>

<!-- Section 1: Charts with a Light Background -->
<div class="section section-charts">
    <h2 class="mb-4">Review Analytics</h2>

    <div class="row">
        <!-- FIRST CHART (Bar) -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Rating Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="distributionChart" width="100%" height="100"></canvas>
                </div>
            </div>
        </div>

        <!-- SECOND CHART (Line) -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">Monthly Average Rating</h5>
                </div>
                <div class="card-body">
                    <canvas id="monthlyChart" width="100%" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Section 2: Table with a Dark Background -->
<div class="section section-table">
    <h3 class="mt-5 mb-3 text-white">All Reviews</h3>

    @if (Model.AllReviews is { Count: > 0 })
    {
        <form method="post" asp-page-handler="DeleteSelected">
            <button type="submit" class="btn btn-danger btn-sm mt-3">
                Delete Selected
            </button>
            <table class="table table-striped table-hover table-dark">
                <thead class="table-light">
                    <tr>
                        <th>
                            <input type="checkbox" id="selectAll" onclick="toggleSelectAll(this)" />
                        </th>
                        <th>Review ID</th>
                        <th>Rating</th>
                        <th>Created At</th>
                        <th>Questions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var review in Model.AllReviews)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" name="selectedReviews" value="@review.ReviewId" />
                            </td>
                            <td>@review.ReviewId</td>
                            <td>@review.Rating</td>
                            <td>@review.CreatedAt.ToString("g")</td>
                            <td>
                                @if (review.Questions != null && review.Questions.Count > 0)
                                {
                                    <ul class="mb-0">
                                        @foreach (var q in review.Questions)
                                        {
                                            <li>
                                               @q.QuestionText
                                                <br />
                                                <em>Answer:</em> @q.ResponseText
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    @("No asnwer.")
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        
        </form>
    }
    else
    {
        <p class="text-white">No reviews found or you may not be authorized.</p>
    }
</div>

<!-- Load Chart.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Chart Scripts -->
<script>
     // Chart 1: Bar with Emojis (Larger)
    var ratingDistribution = @Json.Serialize(Model.RatingDistribution);
    var distCounts = ratingDistribution.map(x => x.count);

    // Image paths for the X-axis labels
    var distLabels = [
        '/images/emoji1.png', // Path to angry face
        '/images/emoji2.png', // Path to sad face
        '/images/emoji3.png', // Path to neutral face
        '/images/emoji4.png', // Path to happy face
        '/images/emoji5.png'  // Path to excited face
    ];

    var ctx1 = document.getElementById('distributionChart').getContext('2d');
    var distributionChart = new Chart(ctx1, {
        type: 'bar',
        data: {
            labels: ['1', '2', '3', '4', '5'], // Placeholder numeric labels
            datasets: [{
                label: 'Number of Reviews by Rating',
                data: distCounts,
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            layout: {
                padding: {
                    bottom: 70 // Add sufficient padding below the chart for emojis
                }
            },
            scales: {
                x: {
                    ticks: {
                        display: false // Hide default numeric labels
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Count'
                    }
                }
            }
        },
        plugins: [{
            id: 'customXLabels',
            afterDraw: function(chart) {
                const ctx = chart.ctx;
                const xAxis = chart.scales.x;

                xAxis.ticks.forEach((tick, index) => {
                    const x = xAxis.getPixelForTick(index);
                    const y = chart.chartArea.bottom + 20; // Place emojis below the chart
                    const img = new Image();
                    img.src = distLabels[index]; // Use the image path
                    img.onload = function() {
                        ctx.drawImage(img, x - 15, y, 30, 30); // Draw emojis (size: 30x30)
                    };
                });
            }
        }]
    });

    // Chart 2: Line
var monthlyData = @Json.Serialize(Model.MonthlyAverages);
var monthLabels = monthlyData.map(m => m.label);
var avgRatings = monthlyData.map(m => m.averageRating);

var ctx2 = document.getElementById('monthlyChart').getContext('2d');

// Create a gradient background for the line chart
var gradient = ctx2.createLinearGradient(0, 0, 0, 400);
gradient.addColorStop(0, 'rgba(255, 99, 132, 0.4)'); // Lighter pink at the top
gradient.addColorStop(1, 'rgba(255, 99, 132, 0)');   // Transparent at the bottom

var emojiLabels = {
    1: "😡", // Angry
    2: "😞", // Sad
    3: "😐", // Neutral
    4: "😊", // Happy
    5: "🤩"  // Excited
};

var monthlyChart = new Chart(ctx2, {
    type: 'line',
    data: {
        labels: monthLabels, // X-axis labels (e.g., "2023-01", "2023-02")
        datasets: [{
            label: 'Monthly Average Rating',
            data: avgRatings, // Data points for the line chart
            fill: true, // Enable fill under the line
            borderColor: 'rgba(255, 99, 132, 1)', // Line color
            backgroundColor: gradient, // Gradient fill under the line
            borderWidth: 3, // Thickness of the line
            tension: 0.3, // Smoothness of the line
            pointRadius: 6, // Radius of data points
            pointHoverRadius: 10, // Radius of data points on hover
            pointBackgroundColor: 'rgba(255, 99, 132, 1)', // Point color
            pointBorderColor: '#fff', // Border color for points
        }]
    },
    options: {
        responsive: true,
        plugins: {
            tooltip: {
                callbacks: {
                    label: function(context) {
                        return `Rating: ${context.raw.toFixed(2)}`; // Show rating with 2 decimals
                    }
                }
            },
            legend: {
                display: true,
                position: 'top', // Position the legend at the top
                labels: {
                    font: {
                        size: 14 // Font size for legend labels
                    }
                }
            }
        },
        scales: {
            x: {
                title: {
                    display: true,
                    text: 'Month', // X-axis title
                    font: {
                        size: 16
                    }
                },
                ticks: {
                    font: {
                        size: 12 // Font size for X-axis labels
                    }
                }
            },
            y: {
                title: {
                    display: true,
                    text: 'Average Rating (Emoji)', // Y-axis title
                    font: {
                        size: 16
                    }
                },
                ticks: {
                    callback: function(value) {
                        return emojiLabels[value] || ''; // Use emoji labels for Y-axis
                    },
                    stepSize: 1, // Ensure only whole numbers (ratings) are shown
                    font: {
                        size: 20 // Font size for emojis
                    }
                },
                min: 1,
                max: 5 // Ensures the Y-axis fits the range of ratings
            }
        }
    }
});


    // Functionality for "Select All" checkbox
    function toggleSelectAll(source) {
        const checkboxes = document.querySelectorAll('input[name="selectedReviews"]');
        for (const checkbox of checkboxes) {
            checkbox.checked = source.checked;
        }
    }
</script>

<!-- Custom Styles -->
<style>
    body {
        background-image: url('../Images/main1.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        margin: 0;
        padding: 0;
    }

    /* Section for charts (light background) */
    .section-charts {
        background-color: #f8f9fa; /* Light gray */
        padding: 20px;
        border-bottom: 5px solid #dee2e6; /* Separator line */
    }

    /* Section for table (dark background) */
    .section-table {
        background-color: #343a40; /* Dark gray */
        padding: 20px;
        color: #ffffff; /* Text color for dark background */
    }

    .logout-btn {
        position: absolute;
        top: 20px;
        left: 20px;
        background-color: dimgray;
        color: #ffffff;
        font-size: 16px;
        font-weight: bold;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

    .logout-btn:hover {
        background-color: rgba(255, 0, 0, 0.8);
        transform: scale(1.05);
    }

    .logout-btn:focus {
        outline: none;
        box-shadow: 0px 0px 10px rgba(255, 0, 0, 0.6);
    }
</style>
